{"version":3,"file":"truncate-smart.js","sourceRoot":"","sources":["../../../src/truncate/truncate-smart.ts"],"names":[],"mappings":";;AAYA,sCAuHC;AAnID;;;;;;;;;;;GAWG;AACH,SAAgB,aAAa,CAAC,GAAW,EAAE,WAAmB,EAAE,aAAsB;IAClF,IAAI,2BAAmC,CAAC;IACxC,IAAI,cAAsB,CAAC;IAE3B,IAAI,aAAa,IAAI,IAAI,EAAE,CAAC;QACxB,aAAa,GAAG,UAAU,CAAC;QAC3B,cAAc,GAAG,CAAC,CAAC;QACnB,2BAA2B,GAAG,CAAC,CAAC;IACpC,CAAC;SAAM,CAAC;QACJ,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC;QACtC,2BAA2B,GAAG,aAAa,CAAC,MAAM,CAAC;IACvD,CAAC;IAED,kEAAkE;IAClE,IAAI,GAAG,CAAC,MAAM,IAAI,WAAW,EAAE,CAAC;QAC5B,OAAO,GAAG,CAAC;IACf,CAAC;IAED,IAAM,eAAe,GAAG,WAAW,GAAG,cAAc,CAAC;IACrD,IAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IAE7B,0DAA0D;IAC1D,+BAA+B;IAC/B,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,IAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QACjE,IAAI,UAAU,EAAE,CAAC;YACb,sEAAsE;YACtE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAC5D,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC;IACL,CAAC;IACD,IAAI,GAAG,CAAC,MAAM,IAAI,WAAW,EAAE,CAAC;QAC5B,OAAO,GAAG,CAAC,CAAC,6EAA6E;IAC7F,CAAC;IAED,iEAAiE;IACjE,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAChD,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IACD,IAAI,GAAG,CAAC,MAAM,IAAI,WAAW,EAAE,CAAC;QAC5B,OAAO,GAAG,CAAC,CAAC,2DAA2D;IAC3E,CAAC;IAED,kEAAkE;IAClE,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC;IAChC,CAAC;IACD,IAAI,YAAY,CAAC,MAAM,IAAI,eAAe,EAAE,CAAC;QACzC,IAAI,MAAM,CAAC,IAAK,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;YACtC,OAAO,CAAC,MAAM,CAAC,IAAK,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,GAAG,cAAc,CAAC,GAAG,aAAa,CAAC,CAAC,MAAM,CAChF,CAAC,EACD,eAAe,GAAG,2BAA2B,CAChD,CAAC;QACN,CAAC;QACD,OAAO,YAAY,CAAC,YAAY,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC,MAAM,CACpE,CAAC,EACD,eAAe,GAAG,2BAA2B,CAChD,CAAC;IACN,CAAC;IAED,uEAAuE;IACvE,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,YAAY,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;IACtC,CAAC;IACD,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,YAAY,IAAI,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC;IACvC,CAAC;IACD,IAAI,YAAY,EAAE,CAAC;QACf,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC,MAAM,IAAI,eAAe,EAAE,CAAC;YAC1D,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC,MAAM,IAAI,WAAW,EAAE,CAAC;gBACtD,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;YAChE,CAAC;YACD,IAAM,wBAAwB,GAAG,eAAe,GAAG,YAAY,CAAC,MAAM,CAAC;YACvE,OAAO,CACH,YAAY,GAAG,YAAY,CAAC,YAAY,EAAE,wBAAwB,EAAE,aAAa,CAAC,CACrF,CAAC,MAAM,CAAC,CAAC,EAAE,eAAe,GAAG,2BAA2B,CAAC,CAAC;QAC/D,CAAC;aAAM,CAAC;YACJ,YAAY,IAAI,YAAY,CAAC;QACjC,CAAC;IACL,CAAC;IAED,0DAA0D;IAC1D,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;QAClB,IAAM,QAAQ,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,MAAM,IAAI,eAAe,EAAE,CAAC;YACtD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,MAAM,IAAI,WAAW,EAAE,CAAC;gBAClD,OAAO,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;YAC5D,CAAC;YACD,IAAM,yBAAyB,GAAG,eAAe,GAAG,YAAY,CAAC,MAAM,CAAC;YACxE,OAAO,CACH,YAAY,GAAG,YAAY,CAAC,QAAQ,EAAE,yBAAyB,EAAE,aAAa,CAAC,CAClF,CAAC,MAAM,CAAC,CAAC,EAAE,eAAe,GAAG,2BAA2B,CAAC,CAAC;QAC/D,CAAC;aAAM,CAAC;YACJ,YAAY,IAAI,QAAQ,CAAC;QAC7B,CAAC;IACL,CAAC;IAED,wDAAwD;IACxD,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QAC/B,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,CAAC,MAAM,GAAG,eAAe,EAAE,CAAC;YACnD,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QAC1D,CAAC;IACL,CAAC;IACD,IAAI,YAAY,CAAC,MAAM,IAAI,WAAW,EAAE,CAAC;QACrC,OAAO,YAAY,CAAC;IACxB,CAAC;IAED,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,eAAe,GAAG,CAAC,EAAE,CAAC;QACtB,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IACD,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,GAAG,aAAa,GAAG,GAAG,CAAC,CAAC,MAAM,CACxF,CAAC,EACD,eAAe,GAAG,2BAA2B,CAChD,CAAC;AACN,CAAC;AAED;;GAEG;AACH,SAAS,QAAQ,CAAC,GAAW;IACzB,sDAAsD;IACtD,IAAM,MAAM,GAAc,EAAE,CAAC;IAC7B,IAAI,MAAM,GAAG,GAAG,CAAC;IAEjB,eAAe;IACf,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC5C,IAAI,KAAK,EAAE,CAAC;QACR,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAED,aAAa;IACb,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC/C,IAAI,KAAK,EAAE,CAAC;QACR,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAED,aAAa;IACb,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC9C,IAAI,KAAK,EAAE,CAAC;QACR,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAED,cAAc;IACd,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC3C,IAAI,KAAK,EAAE,CAAC;QACR,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAED,iBAAiB;IACjB,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAClC,IAAI,KAAK,EAAE,CAAC;QACR,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3B,0FAA0F;IAC9F,CAAC;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,SAAS,QAAQ,CAAC,MAAiB;IAC/B,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QAC/B,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;IACjC,CAAC;IACD,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC;IACvB,CAAC;IACD,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,GAAG,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;IAC7B,CAAC;IACD,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,GAAG,IAAI,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC;IAC9B,CAAC;IACD,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;QAClB,GAAG,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;IACjC,CAAC;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,YAAY,CAAC,OAAe,EAAE,wBAAgC,EAAE,aAAqB;IAC1F,IAAM,4BAA4B,GAAG,wBAAwB,GAAG,CAAC,CAAC;IAClE,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IAC5D,IAAM,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAEhE,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,SAAS,GAAG,CAAC,EAAE,CAAC;QAChB,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IACD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,GAAG,aAAa,GAAG,GAAG,CAAC;AAChE,CAAC","sourcesContent":["/**\n * Date: 2015-10-05\n * Author: Kasper SÃ¸fren <soefritz@gmail.com> (https://github.com/kafoso)\n *\n * A truncation feature, where the ellipsis will be placed at a section within\n * the URL making it still somewhat human readable.\n *\n * @param {String} url\t\t\t\t\t\t A URL.\n * @param {Number} truncateLen\t\t The maximum length of the truncated output URL string.\n * @param {String} ellipsisChars\t The characters to place within the url, e.g. \"...\".\n * @return {String} The truncated URL.\n */\nexport function truncateSmart(url: string, truncateLen: number, ellipsisChars?: string) {\n    let ellipsisLengthBeforeParsing: number;\n    let ellipsisLength: number;\n\n    if (ellipsisChars == null) {\n        ellipsisChars = '&hellip;';\n        ellipsisLength = 3;\n        ellipsisLengthBeforeParsing = 8;\n    } else {\n        ellipsisLength = ellipsisChars.length;\n        ellipsisLengthBeforeParsing = ellipsisChars.length;\n    }\n\n    // If the URL is shorter than the truncate length, return it as is\n    if (url.length <= truncateLen) {\n        return url;\n    }\n\n    const availableLength = truncateLen - ellipsisLength;\n    const urlObj = parseUrl(url);\n\n    // Clean up the URL by removing any malformed query string\n    // (e.g. \"?foo=bar?ignorethis\")\n    if (urlObj.query) {\n        const matchQuery = urlObj.query.match(/^(.*?)(?=(\\?|#))(.*?)$/i);\n        if (matchQuery) {\n            // Malformed URL; two or more \"?\". Removed any content behind the 2nd.\n            urlObj.query = urlObj.query.substr(0, matchQuery[1].length);\n            url = buildUrl(urlObj);\n        }\n    }\n    if (url.length <= truncateLen) {\n        return url; // removing a malformed query string brought the URL under the truncateLength\n    }\n\n    // Clean up the URL by removing 'www.' from the host if it exists\n    if (urlObj.host) {\n        urlObj.host = urlObj.host.replace(/^www\\./, '');\n        url = buildUrl(urlObj);\n    }\n    if (url.length <= truncateLen) {\n        return url; // removing 'www.' brought the URL under the truncateLength\n    }\n\n    // Process and build the truncated URL, starting with the hostname\n    let truncatedUrl = '';\n    if (urlObj.host) {\n        truncatedUrl += urlObj.host;\n    }\n    if (truncatedUrl.length >= availableLength) {\n        if (urlObj.host!.length === truncateLen) {\n            return (urlObj.host!.substr(0, truncateLen - ellipsisLength) + ellipsisChars).substr(\n                0,\n                availableLength + ellipsisLengthBeforeParsing\n            );\n        }\n        return buildSegment(truncatedUrl, availableLength, ellipsisChars).substr(\n            0,\n            availableLength + ellipsisLengthBeforeParsing\n        );\n    }\n\n    // If we still have available chars left, add the path and query string\n    let pathAndQuery = '';\n    if (urlObj.path) {\n        pathAndQuery += '/' + urlObj.path;\n    }\n    if (urlObj.query) {\n        pathAndQuery += '?' + urlObj.query;\n    }\n    if (pathAndQuery) {\n        if ((truncatedUrl + pathAndQuery).length >= availableLength) {\n            if ((truncatedUrl + pathAndQuery).length == truncateLen) {\n                return (truncatedUrl + pathAndQuery).substr(0, truncateLen);\n            }\n            const remainingAvailableLength = availableLength - truncatedUrl.length;\n            return (\n                truncatedUrl + buildSegment(pathAndQuery, remainingAvailableLength, ellipsisChars)\n            ).substr(0, availableLength + ellipsisLengthBeforeParsing);\n        } else {\n            truncatedUrl += pathAndQuery;\n        }\n    }\n\n    // If we still have available chars left, add the fragment\n    if (urlObj.fragment) {\n        const fragment = '#' + urlObj.fragment;\n        if ((truncatedUrl + fragment).length >= availableLength) {\n            if ((truncatedUrl + fragment).length == truncateLen) {\n                return (truncatedUrl + fragment).substr(0, truncateLen);\n            }\n            const remainingAvailableLength2 = availableLength - truncatedUrl.length;\n            return (\n                truncatedUrl + buildSegment(fragment, remainingAvailableLength2, ellipsisChars)\n            ).substr(0, availableLength + ellipsisLengthBeforeParsing);\n        } else {\n            truncatedUrl += fragment;\n        }\n    }\n\n    // If we still have available chars left, add the scheme\n    if (urlObj.scheme && urlObj.host) {\n        const scheme = urlObj.scheme + '://';\n        if ((truncatedUrl + scheme).length < availableLength) {\n            return (scheme + truncatedUrl).substr(0, truncateLen);\n        }\n    }\n    if (truncatedUrl.length <= truncateLen) {\n        return truncatedUrl;\n    }\n\n    let end = '';\n    if (availableLength > 0) {\n        end = truncatedUrl.substr(-1 * Math.floor(availableLength / 2));\n    }\n    return (truncatedUrl.substr(0, Math.ceil(availableLength / 2)) + ellipsisChars + end).substr(\n        0,\n        availableLength + ellipsisLengthBeforeParsing\n    );\n}\n\n/**\n * Parses a URL into its components: scheme, host, path, query, and fragment.\n */\nfunction parseUrl(url: string): UrlObject {\n    // Functionality inspired by PHP function of same name\n    const urlObj: UrlObject = {};\n    let urlSub = url;\n\n    // Parse scheme\n    let match = urlSub.match(/^([a-z]+):\\/\\//i);\n    if (match) {\n        urlObj.scheme = match[1];\n        urlSub = urlSub.slice(match[0].length);\n    }\n\n    // Parse host\n    match = urlSub.match(/^(.*?)(?=(\\?|#|\\/|$))/i);\n    if (match) {\n        urlObj.host = match[1];\n        urlSub = urlSub.slice(match[0].length);\n    }\n\n    // Parse path\n    match = urlSub.match(/^\\/(.*?)(?=(\\?|#|$))/i);\n    if (match) {\n        urlObj.path = match[1];\n        urlSub = urlSub.slice(match[0].length);\n    }\n\n    // Parse query\n    match = urlSub.match(/^\\?(.*?)(?=(#|$))/i);\n    if (match) {\n        urlObj.query = match[1];\n        urlSub = urlSub.slice(match[0].length);\n    }\n\n    // Parse fragment\n    match = urlSub.match(/^#(.*?)$/i);\n    if (match) {\n        urlObj.fragment = match[1];\n        //urlSub = urlSub.slice(match[0].length);  -- not used. Uncomment if adding another block.\n    }\n\n    return urlObj;\n}\n\nfunction buildUrl(urlObj: UrlObject): string {\n    let url = '';\n    if (urlObj.scheme && urlObj.host) {\n        url += urlObj.scheme + '://';\n    }\n    if (urlObj.host) {\n        url += urlObj.host;\n    }\n    if (urlObj.path) {\n        url += '/' + urlObj.path;\n    }\n    if (urlObj.query) {\n        url += '?' + urlObj.query;\n    }\n    if (urlObj.fragment) {\n        url += '#' + urlObj.fragment;\n    }\n    return url;\n}\n\nfunction buildSegment(segment: string, remainingAvailableLength: number, ellipsisChars: string) {\n    const remainingAvailableLengthHalf = remainingAvailableLength / 2;\n    const startOffset = Math.ceil(remainingAvailableLengthHalf);\n    const endOffset = -1 * Math.floor(remainingAvailableLengthHalf);\n\n    let end = '';\n    if (endOffset < 0) {\n        end = segment.substr(endOffset);\n    }\n    return segment.substr(0, startOffset) + ellipsisChars + end;\n}\n\ninterface UrlObject {\n    scheme?: string;\n    host?: string;\n    path?: string;\n    query?: string;\n    fragment?: string;\n}\n"]}